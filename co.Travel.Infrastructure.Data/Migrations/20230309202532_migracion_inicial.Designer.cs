// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using co.Travel.Infrastructure.Data;

#nullable disable

namespace co.Travel.Infrastructure.Data.Migrations
{
    [DbContext(typeof(TravelDbContext))]
    [Migration("20230309202532_migracion_inicial")]
    partial class migracion_inicial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("co.Travel.Domain.Entities.Autor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Apellidos")
                        .HasMaxLength(45)
                        .IsUnicode(false)
                        .HasColumnType("varchar(45)");

                    b.Property<string>("Nombres")
                        .HasMaxLength(45)
                        .IsUnicode(false)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("nombres");

                    b.HasKey("Id")
                        .HasName("PK_Autores");

                    b.ToTable("Autores");
                });

            modelBuilder.Entity("co.Travel.Domain.Entities.AutoresLibro", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AutoresId")
                        .HasColumnType("int")
                        .HasColumnName("AutoresId");

                    b.Property<int?>("LibrosIsbn")
                        .HasColumnType("int")
                        .HasColumnName("LibrosIsbn");

                    b.HasKey("Id")
                        .HasName("PK_AutoresLibro");

                    b.HasIndex("AutoresId");

                    b.HasIndex("LibrosIsbn");

                    b.ToTable("AutoresLibros");
                });

            modelBuilder.Entity("co.Travel.Domain.Entities.Editorial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Sede")
                        .HasMaxLength(45)
                        .IsUnicode(false)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("sede");

                    b.HasKey("Id")
                        .HasName("PK_Editorial");

                    b.ToTable("Editoriales");
                });

            modelBuilder.Entity("co.Travel.Domain.Entities.Libro", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ISBN");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("EditoresId")
                        .HasColumnType("int")
                        .HasColumnName("Editores_id");

                    b.Property<string>("NPaginas")
                        .HasMaxLength(45)
                        .IsUnicode(false)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("n_paginas");

                    b.Property<string>("Sinopsis")
                        .HasColumnType("text")
                        .HasColumnName("sinopsis");

                    b.Property<string>("Titulo")
                        .HasMaxLength(45)
                        .IsUnicode(false)
                        .HasColumnType("varchar(45)");

                    b.HasKey("Id")
                        .HasName("PK_Libros");

                    b.HasIndex("EditoresId");

                    b.ToTable("Libros");
                });

            modelBuilder.Entity("co.Travel.Domain.Entities.AutoresLibro", b =>
                {
                    b.HasOne("co.Travel.Domain.Entities.Autor", "Autores")
                        .WithMany("AutoresLibros")
                        .HasForeignKey("AutoresId")
                        .HasConstraintName("FK_AutoresLibro_autor");

                    b.HasOne("co.Travel.Domain.Entities.Libro", "LibroIsbn")
                        .WithMany("AutoresLibros")
                        .HasForeignKey("LibrosIsbn")
                        .HasConstraintName("FK_AutoresLibro_libro");

                    b.Navigation("Autores");

                    b.Navigation("LibroIsbn");
                });

            modelBuilder.Entity("co.Travel.Domain.Entities.Libro", b =>
                {
                    b.HasOne("co.Travel.Domain.Entities.Editorial", "Editores")
                        .WithMany("Libros")
                        .HasForeignKey("EditoresId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Libros_Editores");

                    b.Navigation("Editores");
                });

            modelBuilder.Entity("co.Travel.Domain.Entities.Autor", b =>
                {
                    b.Navigation("AutoresLibros");
                });

            modelBuilder.Entity("co.Travel.Domain.Entities.Editorial", b =>
                {
                    b.Navigation("Libros");
                });

            modelBuilder.Entity("co.Travel.Domain.Entities.Libro", b =>
                {
                    b.Navigation("AutoresLibros");
                });
#pragma warning restore 612, 618
        }
    }
}
